1.	Date Difference

def dateDiff(date1, date2) : 
"""
Calculate number of days between date1 and date2.
date1 : str, in format DD-MM-YYYY
date2 : str, in format DD-MM-YYYY
returns : int, number of days between dates
"""


2.	Bracket match up

def bracketCheck(s) : 
	"""
	Check if the opening and closing brackets match up in s.
	s : str
	return : boolean, True if brackets match up, False otherwise
	"""
	
	correspond = {'}' : '{', ']' : '[', ')' : '('}
	brackets = []
	for char in s : 
		if char == '{' or char == '(' or char == '[' : 
			brackets.append(char)
		elif char == '}' or char == ')' or char == ']' : 
			try : 
				if brackets[-1] == correspond[char] : 
					brackets = brackets[:-1]
				else :
					return False
			except : 
				return False
	if len(brackets) == 0 : 
		return True
	else :
		return False


3.	Camel Case

def camelCase(text) : 
	"""
	text : str, text to be converted to camel case
	returns : str, camel case of entered text
	Eg. : "the_Serpent-isDead" -> "theSerpentIsDead"
	"""
	words = []
	curr = ""
	#run through the string to extract words to a list
	for char in text : 
		#if a - or _ is encountered append the so-far stored characters to the list and flush. Repeat.
		if char == "-" or char == "_" : 
			if len(curr) > 0 : 
				words.append(curr)
				curr = ""
		#keep storing characters until a - or _ is encountered
		else : 
			curr += char
	if curr != "" :
		words.append(curr)
	camelWords = []
	if len(words) > 0 : 
		camelWords.append(words[0])
		#go through list and capitalize first letter of each word starting from 2nd word
		for word in words[1:] :
			camelWord = word[0].upper()+word[1:]
			camelWords.append(camelWord)
	#join words in list
	return "".join(camelWords)

4.	ROT13 - Caeser cipher. Replace each letter in input string with one 13 places away.

def rot13(text) : 
	"""
	text : str, input text to be ciphered, may contain punctuation or special characters which need to preserved
	returns : str, ciphered text of input text
	Eg. : "test" -> "grfg", "Test" -> "Grfg"
	"""
	#for each character in string get ASCII value
	#if ASCII value between 97 and 122 subtract 97 else between 65 and 90 so subtract 65
	#check if within 0 and 25. If yes, add 13, then take mod wrt 26.
	#add value subtracted in penultimate step

	cipherText = ""
	rotVal = 13
	for char in text : 
		chrInt = ord(char)
		subtract = 0
		if chrInt >= 97 : 
			subtract = 97
		else :
			subtract = 65
		chrInt -= subtract
		if chrInt >= 0 and chrInt <= 25 : 
			chrInt += rotVal
			chrInt %= 26
		chrInt += subtract
		cipherText += chr(chrInt)
	return cipherText

5.	Given list of strings and a parameter k, find the longest string obtained by concatenating k consecutive strings of the array.

def longest_consec(strarr, k) : 
	"""
	strarr : list, list of strings from which consecutive strings need to be concatenated
	k : int, no. of consecutive strings to concatenate
	returns : str, first longest string obtained by concatenating 
	Eg. : ["anike", "tree", "found"], 2 -> "aniketree" (although treefound has same length it appears later)
	"""

	# if k <= 0 or k > n or n == 0 where n = len(strarr) return "" 
	# else initialize output string
	# generate a list of lengths of strings
	# go through list of lengths adding together k at a time
	# if the sum is greater than last stored sum update last stored sum and corresponding output string

	n = len(strarr)
	if k <= 0 or k > n or n == 0 : 
		return "" 
	else : 
		lenarr = []
		for str in strarr :
			lenarr.append(len(str))
		outstr = "" 
		maxlen = 0
		currsum = 0
		for i in range(n-k+1) : 
			if i == 0 :
				currsum = sum(lenarr[i:i+k])
			else : 
				currsum = currsum - lenarr[i-1] + lenarr[i+k-1]
			if currsum > maxlen : 
				maxlen = currsum
				outstr = ""
				for j in range(i, i+k) : 
					outstr += strarr[j]
		return outstr

 6.	Prime factorisation

def prime_factorise(n) : 
	"""
	n : int, number to prime factorise
	returns : str, (p1**n1)(p2**n2)... where pi is an ni repeated prime factor, and p1 < p2 < p3...
	Eg : 86240 -> (2**5)(5)(7**2)(11)
	"""
	
	# generate dictionary with primes up to sqrn as keys 
	# for each prime if remainder = 0 add 1 to dict key and n = n//p
	# else move to next prime
	# terminate when n = 1

	factors = ""
	if n < 0 : 
		print("Cannot factorise negative number.")
	else : 
		primeDic = {2 : 0}
		for i in range(3, int(n**0.5) + 1) : 
			prime = True
			for key in primeDic.keys() : 
				if i % key == 0 : 
					prime = False
					break
			if prime : 
				primeDic[i] = 0
		# for each prime if remainder = 0 add 1 to dict key
		# and n = n//p else move to next key
		# terminate when n <= 1 (to cover case for n = 0)
		for key in primeDic.keys() : 
			if n <= 1 : 
				break
			else : 
				while n % key == 0: 
					primeDic[key] += 1
					n = n // key
		for key in primeDic.keys() : 
			if primeDic[key] > 1 : 
				factors += "(" + str(key) + "**" + str(primeDic[key]) + ")"
			elif primeDic[key] == 1 : 
				factors += "(" + str(key) +  ")"
		# after dividing out by all primes upto sqrt(n)
		# n must be prime
		if n != 1 : 
			factors += "(" + str(n) +  ")"
	return factors

7.	Unique in sequence
def unique(text) : 
	"""
	text : list (or string), sequence of characters from which unique elements need to be extracted
	returns : list, list of unique characters in order
	Eg. : 'AAAABBBCCDAABBB' -> ['A', 'B', 'C', 'D', 'A', 'B']
	"""
	
	# for each element in sequence store the last element seen and compare to current element
	# if different, append to output list

	out = []
	prev = None
	for char in text : 
		if char != prev : 
			out.append(char)
			prev = char
	return out

8.	Square into squares - NOT CORRECT
def decompose(n) : 
	"""
	n : int, number to decompose
	returns : list, strictly increasing sequece of numbers 
		into which n is decomposed s.t. n^2 = sum of squares 
		of all in returned sequence. The sequence should have
		the largest numbers possible.
	Eg. : 11 -> 1, 2, 4, 10 since 11^2 = 1^2 + 2^2 + 4^2 + 10^2
	Eg. : 50 -> 1, 3, 5, 8, 49 not 1, 1, 4, 9, 49
	"""

	# start with subtracting (n-1)**2 from n**2. 
	# check sqrt of difference and take floor of it
	# subtract square of the floored number and get difference
	# repeat until difference = 0 
	# check if we have repeats
	# if yes start from top with subtracting (n-2)**2
	# if not reverse list and return

	out = []
	for i in range(n-1, 0, -1) : 
		out = []
		diff = n**2
		curr = i
		while diff > 0 : 
			out.append(curr)
			diff -= curr**2
			curr = int(diff**0.5)
		outdic = {}
		dupflag = False
		for elem in out : 
			try : 
				outdic[elem] += 1
				dupflag = True
				break
			except : 
				outdic[elem] = 1
		if not dupflag : 
			break
	out.sort()
	return out

9.	Buying a car
def nbMonths(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth) :
	""" 
	
	"""
	months = 0
	percentLossByMonth /= 100
	priceDiff = startPriceOld - startPriceNew
	balance = priceDiff
	while balance < 0 : 
		months += 1
		if months % 2 == 0 : 
			percentLossByMonth += 0.005
		priceDiff *= (1.0 - percentLossByMonth)
		balance = priceDiff + savingperMonth*months
	return [months, round(balance)]
	

		
	